{"version":3,"file":"web3-provider-failover.cjs.development.js","sources":["../src/utils/configParser.ts","../src/utils/providerEndpoint.ts","../src/index.ts"],"sourcesContent":["/**\n * @file configParser\n */\nimport * as fs from 'fs';\nimport * as yaml from 'yaml';\n\n/**\n * @const getConfig\n * @summary Get and Parse the Config from the root directory\n */\n\nconst getConfig = (configPath: any) => {\n  const configFile = fs.readFileSync(configPath, 'utf8');\n  return yaml.parse(configFile);\n};\n\nexport default getConfig;\n/** @exports getConfig */\n","import * as providers from '@ethersproject/providers';\n\n/**\n * @file providerEndpoint\n * @summary url to provider\n */\n\n/**\n *  @const providerEndpoint\n *  @summary Coerces a URL into its respective provider\n *  @param {string} url RPC/WS Endpoint\n *  @param {string} networkId of chain\n *  @note this is defined in a `.yaml` configuration file\n */\n\nconst providerEndpoint = (url: any, networkId: any) => {\n  if (url.startsWith('http')) {\n    return new providers.JsonRpcProvider(url, networkId);\n  } else if (url.startsWith('ws')) {\n    return new providers.WebSocketProvider(url, networkId);\n  } else {\n    throw new Error('Could not resolve url to provider');\n  }\n};\n\n//module.exports = providerEndpoint;\nexport default providerEndpoint;\n/** @exports providerEndpoint */\n","/**\n * @file RPC Failover\n * @license MIT\n * @version 0.2.0\n */\n\nimport * as providers from '@ethersproject/providers';\nimport getConfig from './utils/configParser';\nimport providerEndpoint from './utils/providerEndpoint';\n\n/**\n * @class FailsafeProvider\n * @summary Fallback Provider which is capable of connecting to multiple back ends\n */\nclass FailsafeProvider {\n  config: any;\n  provider: any;\n\n  /**\n   * Generates the fallback provider from given config\n   * @param {path} pathToConfig\n   */\n\n  constructor(pathToConfig: any) {\n    this.config = getConfig(pathToConfig);\n    const providerConfig = this.config.providers.map((provider: any) => {\n      const config = {};\n      (config as any).provider = providerEndpoint(provider.url, networkId);\n      Object.assign(config, provider.config);\n      return config;\n    });\n    this.provider = new providers.FallbackProvider(providerConfig);\n  }\n\n  /**\n   * Returns the fallback provider\n   * @return {provider}\n   */\n\n  get() {\n    return this.provider;\n  }\n}\n\nmodule.exports = {\n  FailsafeProvider,\n};\n\nfunction networkId(_url: any, _networkId: any): any {\n  throw new Error('Function not implemented.');\n}\n/** @exports FailsafeProvider */\nexport default FailsafeProvider;\n"],"names":["providers.JsonRpcProvider"],"mappings":";;;;;;;;AAAA;;AAEG;;;;;;aAWU;AACX,sDAAA;;;;;;;;;;;;;;;;;;;SCIO;eACEA,+BAA+B;;;;;;;;;ACnB1C;;;;AAIG;AAGH;;;;;;;;;;;SAuBK;sBACe,uCAA8B,UAAiB;;;;;;AAQjE,iBAAA,iDAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;"}