{"version":3,"file":"web3-rpc-failover.cjs.development.js","sources":["../src/module/configParser.ts","../src/module/providerEndpoint.ts","../src/module/FailOverProvider.ts"],"sourcesContent":["/**\n * @file configParser\n */\nimport * as fs from 'fs';\nimport * as yaml from 'yaml';\n\n/**\n * @const getConfig\n * @summary Get and Parse the Config from the root directory\n */\n\nconst getConfig = (configPath: any) => {\n  const configFile = fs.readFileSync(configPath, 'utf8');\n  return yaml.parse(configFile);\n};\n\nexport default getConfig;\n/** @exports getConfig */\n","import * as providers from '@ethersproject/providers';\n\n/**\n * @file providerEndpoint\n * @summary url to provider\n */\n\n/**\n *  @const providerEndpoint\n *  @summary Coerces a URL into its respective provider\n *  @param {string} url RPC/WS Endpoint\n *  @param {string} networkId of chain\n *  @note this is defined in a `.yaml` configuration file\n */\n\nconst providerEndpoint = (url: any, networkId: any) => {\n  if (url.startsWith('http')) {\n    return new providers.JsonRpcProvider(url, networkId);\n  } else if (url.startsWith('ws')) {\n    return new providers.WebSocketProvider(url, networkId);\n  } else {\n    throw new Error('Could not resolve url to provider');\n  }\n};\n\n//module.exports = providerEndpoint;\nexport default providerEndpoint;\n/** @exports providerEndpoint */\n","/**\n * @packageName Web3 RPC FailOverProvider\n * @license MIT\n * @version 1.3.0\n */\n\nimport * as providers from '@ethersproject/providers';\n\nimport getConfig from './configParser';\nimport providerEndpoint from './providerEndpoint';\n\n// or {[k: string]: never}\ntype EmptyObject = Record<string, never>;\n\n/**\n * @class FailOverProvider\n * @summary Fallback Provider which is capable of connecting to multiple back ends\n */\nexport class FailOverProvider {\n  config: any;\n  provider: any;\n\n  /**\n   * Generates the fallback provider from given config\n   * @param {path} pathToConfig\n   */\n  constructor(pathToConfig: any) {\n    this.config = getConfig(pathToConfig);\n    const providerConfig = this.config.providers.map((provider: any) => {\n      const f: EmptyObject = {};\n      const config = f;\n      // getNetwork.bind(null, provider.network));\n      (config as any).provider = providerEndpoint(provider.url, provider.networkId);\n      Object.assign(config, provider.config);\n      return config;\n    });\n    this.provider = new providers.FallbackProvider(providerConfig);\n  }\n\n  /**\n   * Returns the fallback provider\n   * @return {provider}\n   */\n\n  get() {\n    return this.provider;\n  }\n}\n"],"names":["getConfig","configPath","configFile","fs","yaml","providerEndpoint","url","networkId","startsWith","providers","Error","FailOverProvider","pathToConfig","config","providerConfig","map","provider","f","Object","assign","get"],"mappings":";;;;;;;;AAAA;;;AAMA;;;;;AAKA,IAAMA,SAAS,GAAG,SAAZA,SAAY,CAACC,UAAD;AAChB,MAAMC,UAAU,GAAGC,eAAA,CAAgBF,UAAhB,EAA4B,MAA5B,CAAnB;AACA,SAAOG,UAAA,CAAWF,UAAX,CAAP;AACD,CAHD;AAMA;;ACfA;;;;;AAKA;;;;;;;;AAQA,IAAMG,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,GAAD,EAAWC,SAAX;AACvB,MAAID,GAAG,CAACE,UAAJ,CAAe,MAAf,CAAJ,EAA4B;AAC1B,WAAO,IAAIC,yBAAJ,CAA8BH,GAA9B,EAAmCC,SAAnC,CAAP;AACD,GAFD,MAEO,IAAID,GAAG,CAACE,UAAJ,CAAe,IAAf,CAAJ,EAA0B;AAC/B,WAAO,IAAIC,2BAAJ,CAAgCH,GAAhC,EAAqCC,SAArC,CAAP;AACD,GAFM,MAEA;AACL,UAAM,IAAIG,KAAJ,CAAU,mCAAV,CAAN;AACD;AACF,CARD;AAYA;;AC3BA;;;;;AAMA,AAQA;;;;;AAIA,IAAaC,gBAAb;AAIE;;;;AAIA,4BAAYC,YAAZ;AACE,SAAKC,MAAL,GAAcb,SAAS,CAACY,YAAD,CAAvB;AACA,QAAME,cAAc,GAAG,KAAKD,MAAL,CAAYJ,SAAZ,CAAsBM,GAAtB,CAA0B,UAACC,QAAD;AAC/C,UAAMC,CAAC,GAAgB,EAAvB;AACA,UAAMJ,MAAM,GAAGI,CAAf;;AAECJ,MAAAA,MAAc,CAACG,QAAf,GAA0BX,gBAAgB,CAACW,QAAQ,CAACV,GAAV,EAAeU,QAAQ,CAACT,SAAxB,CAA1C;AACDW,MAAAA,MAAM,CAACC,MAAP,CAAcN,MAAd,EAAsBG,QAAQ,CAACH,MAA/B;AACA,aAAOA,MAAP;AACD,KAPsB,CAAvB;AAQA,SAAKG,QAAL,GAAgB,IAAIP,0BAAJ,CAA+BK,cAA/B,CAAhB;AACD;AAED;;;;;;AAr}